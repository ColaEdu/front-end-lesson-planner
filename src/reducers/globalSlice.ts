// Import the required libraries and methods
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { streamOpenAI, getDocRecord } from '../server/openai';
// Define the initial state of the global store
interface GlobalState {
  text: string;
  editId: string;
  aiLoading: boolean;
  aiActive: boolean;
}
const initialState: GlobalState = {
  text: '',
  editId: '',
  aiLoading: false,
  // 开发环境开关
  aiActive: true,
};

export const callOpenAI = (query) => async (dispatch: any) => {
  dispatch(settext(''));
  const headers = {
    'Content-Type': 'application/json'
  };

  const body = JSON.stringify({
    textBookName: query.textBookName,
    teachingTheme: query.teachingTheme,
    messages: [
      {
        role: 'user',
        content: `请按以下要求生成一篇标准化结构的教案：课本:${query.textBookName},课文标题:${query.title},课文内容:${query.content}`
      }]
  });

  const response = await fetch('http://43.134.126.166:3001/lessonPlan', {
    method: 'POST',
    headers,
    body
  });

  const reader = response.body.getReader();
  let chunks = '';
  let texts = '';
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    chunks += new TextDecoder('utf-8').decode(value);
    texts += chunks;
    dispatch(settext(texts))
    try {
      // const result = JSON.parse(chunks);
      // console.log(result);
      chunks = '';
    } catch (e) {
      // incomplete JSON data, keep reading
    }
  }
}

// Create the globalSlice using createSlice from Redux Toolkit
const globalSlice = createSlice({
  name: 'global',
  initialState,
  reducers: {
    settext: (state, action: PayloadAction<string>) => {
      state.text = action.payload;
    },
    seteditId: (state, action: PayloadAction<string>) => {
      state.editId = action.payload;
    },
    setAIloading: (state, action: PayloadAction<boolean>) => {
      state.aiLoading = action.payload;
    },
    setaiActive: (state, action: PayloadAction<boolean>) => {
      state.aiActive = action.payload;
    },
  },
});

// Export the actions generated by the globalSlice
export const { settext, seteditId, setAIloading, setaiActive } = globalSlice.actions;

// Export the globalSlice reducer
export default globalSlice;