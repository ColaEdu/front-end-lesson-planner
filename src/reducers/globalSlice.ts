// Import the required libraries and methods
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { HOST_PREFIX } from '../App';
import { streamOpenAI, getDocRecord } from '../server/openai';
// Define the initial state of the global store
interface GlobalState {
  text: string;
  editId: string;
  aiLoading: boolean;
  showAskAI: boolean;
  aiActive: boolean;
  askAISelection: any;
}
const initialState: GlobalState = {
  text: `# 《小蝌蚪找妈妈》教案
  ## 一、教材分析本课是小学语文二年级上册部编版的一篇课文，主要讲述了小蝌蚪在水里寻找妈妈的故事。通过这个故事，让学生了解蝌蚪的生长过程，培养学生的探究精神和勇敢精神。## 二、教学目标1. 知道蝌蚪的生长过程，了解蝌蚪的生活习性。2. 能够理解课文内容，掌握课文中的重点词汇和句子。3. 培养学生的探究精神和勇敢精神，鼓励学生勇敢探索未知领域。## 三、教学重点1. 理解课文内容，掌握课文中的重点词汇和句子。2. 培养学生的探究精神和勇敢精神。## 四、教学难点1. 培养学生的探究精神和勇敢精神。2. 让学生理解蝌蚪的生长过程，了解蝌蚪的生活习性。## 五、课时安排本课为一节课，共计40分钟。| 时间 | 内容 || ---- | ---- || 5分钟 | 导入，介绍课文 || 10分钟 | 学生阅读课文 || 10分钟 | 教师讲解课文 || 10分钟 | 学生小组讨论 || 5分钟 | 课堂总结 |## 六、教学资源准备1. 课本《小学语文二年级上册部编版》。2. 课件、图片等多媒体教学资源。3. 学生小组讨论的题目。## 七、教学过程### 1. 导入（5分钟）教师通过图片或者视频等多媒体资源，引导学生了解蝌蚪的生长过程，激发学生的好奇心和探究欲望。### 2. 学生阅读课文（10分钟）学生阅读课文《小蝌蚪找妈妈》，并标记出不理解的词汇和句子。### 3. 教师讲解课文（10分钟）教师通过多媒体教学资源，讲解课文中的重点词汇和句子，帮助学生理解课文内容。### 4. 学生小组讨论（10分钟）学生分成小组，讨论蝌蚪的生长过程和生活习性，鼓励学生勇敢探索未知领域。### 5. 课堂总结（5分钟）教师对本节课的内容进行总结，强调学生需要勇敢探索未知领域，培养学生的探究精神和勇敢精神。以上就是本节课的教学过程，希望能够帮助学生更好地理解课文内容，培养学生的探究精神和勇敢精神。`,
  editId: '',
  aiLoading: false,
  // ask ai显示隐藏按钮
  showAskAI: false,
  // askAI 选择的文本
  askAISelection: null,
  // 开发环境开关
  aiActive: true,
};
/**
 * 调用openai异步action
 * @param query 
 * @returns 
 */
export const callOpenAI = (query) => async (dispatch: any) => {
  await streamOpenAI(query, (text) => {
    dispatch(settext(text))
  })
}

// Create the globalSlice using createSlice from Redux Toolkit
const globalSlice = createSlice({
  name: 'global',
  initialState,
  reducers: {
    settext: (state, action: PayloadAction<string>) => {
      state.text = action.payload;
    },
    seteditId: (state, action: PayloadAction<string>) => {
      state.editId = action.payload;
    },
    setAIloading: (state, action: PayloadAction<boolean>) => {
      state.aiLoading = action.payload;
    },
    setaiActive: (state, action: PayloadAction<boolean>) => {
      state.aiActive = action.payload;
    },
    setaskAI: (state, action: PayloadAction<boolean>) => {
      state.showAskAI = action.payload;
    },
    setaskAISelection: (state, action: PayloadAction<any>) => {
      state.askAISelection = action.payload;
    }
  },
});

// Export the actions generated by the globalSlice
export const { settext, seteditId, setAIloading, setaiActive, setaskAI, setaskAISelection } = globalSlice.actions;

// Export the globalSlice reducer
export default globalSlice;